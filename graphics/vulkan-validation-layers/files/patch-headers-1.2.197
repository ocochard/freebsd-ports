https://github.com/KhronosGroup/Vulkan-ValidationLayers/commit/def5cf6be051

In file included from layers/vk_layer_config.cpp:38:
In file included from layers/vk_layer_utils.h:33:
In file included from layers/vk_layer_logging.h:49:
layers/generated/vk_enum_string_helper.h:7149:73: error: unknown type name 'VkVideoEncodeH265CapabilityFlagBitsEXT'; did you mean 'VkVideoEncodeH264CapabilityFlagBitsEXT'?
static inline const char* string_VkVideoEncodeH265CapabilityFlagBitsEXT(VkVideoEncodeH265CapabilityFlagBitsEXT input_value)
                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
layers/generated/parameter_validation.cpp:128:87: error: use of undeclared identifier 'VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT'; did you mean 'VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT'?
const VkVideoEncodeH265CapabilityFlagsEXT AllVkVideoEncodeH265CapabilityFlagBitsEXT = VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_8X8_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT;
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--- layers/generated/parameter_validation.cpp.orig	2021-10-14 22:34:31 UTC
+++ layers/generated/parameter_validation.cpp
@@ -125,9 +125,6 @@ const VkVideoEncodeH264InputModeFlagsEXT AllVkVideoEnc
 const VkVideoEncodeH264OutputModeFlagsEXT AllVkVideoEncodeH264OutputModeFlagBitsEXT = VK_VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT|VK_VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT|VK_VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT;
 #endif
 #ifdef VK_ENABLE_BETA_EXTENSIONS
-const VkVideoEncodeH265CapabilityFlagsEXT AllVkVideoEncodeH265CapabilityFlagBitsEXT = VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_8X8_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT|VK_VIDEO_ENCODE_H265_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT;
-#endif
-#ifdef VK_ENABLE_BETA_EXTENSIONS
 const VkVideoEncodeH265CtbSizeFlagsEXT AllVkVideoEncodeH265CtbSizeFlagBitsEXT = VK_VIDEO_ENCODE_H265_CTB_SIZE_8_BIT_EXT|VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT|VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT|VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT;
 #endif
 #ifdef VK_ENABLE_BETA_EXTENSIONS
@@ -2526,7 +2523,7 @@ bool StatelessValidation::ValidatePnextStructContents(
         case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT: { // Covers VUID-VkVideoEncodeH265CapabilitiesEXT-sType-sType
             if (is_const_param) {
                 VkVideoEncodeH265CapabilitiesEXT *structure = (VkVideoEncodeH265CapabilitiesEXT *) header;
-                skip |= validate_flags("VkVideoEncodeH265CapabilitiesEXT", "flags", "VkVideoEncodeH265CapabilityFlagBitsEXT", AllVkVideoEncodeH265CapabilityFlagBitsEXT, structure->flags, kRequiredFlags, "VUID-VkVideoEncodeH265CapabilitiesEXT-flags-parameter", "VUID-VkVideoEncodeH265CapabilitiesEXT-flags-requiredbitmask");
+                skip |= validate_reserved_flags("VkVideoEncodeH265CapabilitiesEXT", "flags", structure->flags, "VUID-VkVideoEncodeH265CapabilitiesEXT-flags-zerobitmask");
 
                 skip |= validate_flags("VkVideoEncodeH265CapabilitiesEXT", "inputModeFlags", "VkVideoEncodeH265InputModeFlagBitsEXT", AllVkVideoEncodeH265InputModeFlagBitsEXT, structure->inputModeFlags, kRequiredFlags, "VUID-VkVideoEncodeH265CapabilitiesEXT-inputModeFlags-parameter", "VUID-VkVideoEncodeH265CapabilitiesEXT-inputModeFlags-requiredbitmask");
 
--- layers/generated/vk_enum_string_helper.h.orig	2021-10-14 22:34:31 UTC
+++ layers/generated/vk_enum_string_helper.h
@@ -7146,53 +7146,6 @@ static inline std::string string_VkVideoEncodeH264Crea
 
 #ifdef VK_ENABLE_BETA_EXTENSIONS
 
-static inline const char* string_VkVideoEncodeH265CapabilityFlagBitsEXT(VkVideoEncodeH265CapabilityFlagBitsEXT input_value)
-{
-    switch (input_value)
-    {
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_8X8_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_8X8_BIT_EXT";
-        case VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT:
-            return "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT";
-        default:
-            return "Unhandled VkVideoEncodeH265CapabilityFlagBitsEXT";
-    }
-}
-
-static inline std::string string_VkVideoEncodeH265CapabilityFlagsEXT(VkVideoEncodeH265CapabilityFlagsEXT input_value)
-{
-    std::string ret;
-    int index = 0;
-    while(input_value) {
-        if (input_value & 1) {
-            if( !ret.empty()) ret.append("|");
-            ret.append(string_VkVideoEncodeH265CapabilityFlagBitsEXT(static_cast<VkVideoEncodeH265CapabilityFlagBitsEXT>(1U << index)));
-        }
-        ++index;
-        input_value >>= 1;
-    }
-    if( ret.empty()) ret.append(string_VkVideoEncodeH265CapabilityFlagBitsEXT(static_cast<VkVideoEncodeH265CapabilityFlagBitsEXT>(0)));
-    return ret;
-}
-#endif // VK_ENABLE_BETA_EXTENSIONS
-
-
-#ifdef VK_ENABLE_BETA_EXTENSIONS
-
 static inline const char* string_VkVideoEncodeH265InputModeFlagBitsEXT(VkVideoEncodeH265InputModeFlagBitsEXT input_value)
 {
     switch (input_value)
